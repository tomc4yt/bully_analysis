Table[, first.fy.col:ncol(Table)] <- colwise(replace_comma)(Table[, first.fy.col:ncol(Table)])
Table[, first.fy.col:ncol(Table)] <- colwise(as.integer)(Table[, first.fy.col:ncol(Table)])
Table[, first.fy.col:ncol(Table)] <- colwise(function(x){ifelse(is.na(x),0,x)})(Table[, first.fy.col:ncol(Table)])
Table[, 'POM notes'] <- ifelse(is.na( Table[, 'POM notes']), "", Table[, 'POM notes'])
return(Table)
library(ggplot2)
stocks <- read.csv("stocks.xlsx")
stocks
stocks <- read.csv("stocks.csv")
stocks <- read.csv("stocks.csv")
stocks <- read.csv("stocks.csv")
stocks <- read.csv("stocks.csv")
head(stocks)
setnames(stocks, "X1.year", "rate")
library(data.table)
setnames(stocks, "X1.year", "rate")
ggplot(data = stocks, aes(x = ER, y = rate))+
geom_point()
ggplot(data = stocks, aes(x = ER, y = rate))+
geom_point()
stocks <- read.csv("stocks.csv")
ggplot(data = stocks, aes(x = ER, y = rate))+
geom_point()
ggplot(data = stocks, aes(x = ER, y = rate))+
geom_point() +
geom_smooth()
ggplot(data = stocks, aes(x = ER, y = rate))+
geom_point() +
ylab("Rate of Return") +
xlab("Expense Ratio") +
ggtitle("1 Year return for Available Funds") +
geom_smooth()
ggplot(data = stocks, aes(x = ER, y = rate))+
geom_point() +
ylab("Rate of Return (%)") +
xlab("Expense Ratio") +
ggtitle("1 Year return for Available Funds") +
geom_smooth()
library(sqldf)
library(RSQLite)
library(XLConnect)
library(gdata)
library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
library(ggplot2)
library(stringr)
# ---------------------------
replace_comma <- function(x){
gsub(x = x, pattern = ",", replacement = "")
}
import_sheet <- function(Table){
Table <- Table[!(is.na(Table[, 3])), ]
#   colnames(Table) <- Table[1, ]
names(Table) <- gsub(names(Table), pattern = "\n|\\$", replacement = "")
#   Table <- Table[-1, ]
first.fy.col <- min(which(grepl(colnames(Table), pattern = "[0-9]")))
Table[, first.fy.col:ncol(Table)] <- colwise(replace_comma)(Table[, first.fy.col:ncol(Table)])
Table[, first.fy.col:ncol(Table)] <- colwise(as.integer)(Table[, first.fy.col:ncol(Table)])
Table[, first.fy.col:ncol(Table)] <- colwise(function(x){ifelse(is.na(x),0,x)})(Table[, first.fy.col:ncol(Table)])
Table[, 'POM.notes'] <- ifelse(is.na( Table[, 'POM.notes']), "", Table[, 'POM.notes'])
names(Table) <- gsub(names(Table), pattern = "\\.", replacement = "_")
names(Table) <- gsub(names(Table), pattern = "X", replacement = "")
return(Table)
}
prepare_table <- function(table, db.conn, budget_phase, budget_year, FleetReserve){
# Extract Column names from Input Data
table <- ddply(table, .(Depot, Sub_Program, Fdg, TMS), function(df){
df$ID <- 1:nrow(df)
return(df)
})
table <- table[, c(1:4, ncol(table), 5:(ncol(table) - 1))]
table.cols <- colnames(table)
key.cols <- table.cols[1:6]
budget.cols <- table.cols[(-1)*1:6]
budget.cols <- unique(gsub(x = budget.cols, pattern = "(\\s)?[0-9]{2}(\\s)?", replacement = ""))
# Melt dataframe and reassemble
for (column_name in budget.cols){
temp.df <- table[, which(table.cols %in% key.cols | grepl(table.cols, pattern = column_name, perl = T))]
value.columns <- colnames(temp.df[(-1)*1:6])
colnames(temp.df) <- c(key.cols, value.columns)
temp.df <- melt(temp.df, id.vars = key.cols, measure.vars = value.columns, variable.name = "FY", value.name = column_name)
# Set column names
replace_string <- gsub(temp.df$FY, pattern = "[0-9]+_", replacement = "")[1]
temp.df$FY <- as.integer(gsub(temp.df$FY, pattern = paste0("_", replace_string), replacement = ""))
setnames(temp.df, column_name, replace_string)
temp.df[, 8] <- as.integer(temp.df[, 8]) # Value Column
temp.df$FY <- temp.df$FY + 2000
if (which(budget.cols == column_name) == 1){
melted.table <- temp.df
} else {
melted.table <- merge(melted.table, temp.df, by = c(key.cols, "FY"))
}
}
names(melted.table) <- gsub(names(melted.table), pattern = "^_|_$|_", replacement = "")
melted.table$FY <- as.integer(melted.table$FY)
# Add Budget Info
melted.table$budget_year <- budget_year
melted.table$budget_type <- budget_phase
melted.table$FleetReserve <- FleetReserve
# Write to Database
dbWriteTable(conn = db.conn, name = "Budgets", value = melted.table, row.names = FALSE, append = T)
}
read_file <- function(file.name, phase = "auto", year = "auto"){
if (phase == "auto") {
phase <- substring(file.name, 4, str_locate(file.name, "_")[1, 'end'] - 1)
}
if (year == "auto") {
year <- paste0("20", substring(file.name, 1, 2))
}
wb.file <- paste0(path, file.name)
wb <- loadWorkbook(wb.file)
Tables <- readWorksheet(wb, sheet = getSheets(wb))
Fleet <- import_sheet(Tables$Fleet)
Reserve <- import_sheet(Tables$Reserve)
prepare_table(Fleet, db, budget_phase = phase, budget_year = year, "Fleet")
prepare_table(Reserve, db, budget_phase = phase, budget_year = year, "Reserve")
}
# ----------------------------------------------------------------------------------
# Write Data
# ----------------------------------------------------------------------------------
# Read in file
path <- "C:/Users/Tom/Documents/Projects/1a5a/"
file.names <- dir(path, pattern = ".xlsx")
db <- dbConnect(SQLite(), dbname = "1a5a.sqlite")
library(RSQLite)
library(plyr)
library(reshape2)
library(lubridate)
library(tools)
library(readxl)
library(uuid)
source("~/.veracitydata")
FA18.path <- paste0(base.data.path, "FA18/")
hist.paa.path <- paste0(FA18.path, "Historical_PAA/")
ramp.path <- paste0(FA18.path, "RAMP/")
fhinv.rep.path <- paste0(FA18.path, "PMA265_FH_Inv_Report/")
airrs.path <- paste0(FA18.path, "AIRRS/")
schedule.path <- paste0(FA18.path, "SKED/")
flight.recs.path <- paste0(FA18.path, "FlightRecords/")
fle.rates.path <- paste0(FA18.path, "FLE_Rates/")
db.file <- paste0(FA18.path, "FA-18InputData.db")
getdbcon <- function() {
dbcon <- dbConnect(dbDriver("SQLite"), dbname = db.file)
dbadmin <- data.frame(dbID = UUIDgenerate(), date = as.character(Sys.Date()))
dbWriteTable(dbcon, "dbadmin", dbadmin, row.names = FALSE, overwrite = TRUE)
return(dbcon)
}
#----------------------------------------------------------------------------------------------------
LoadMasterTable <- function(d.path = fhinv.rep.path){
df.1 <- as.data.frame(read_excel(paste0(d.path, "Flt Hour & Inventory Rpt.xlsm"), sheet = 3, skip = 4,
col_types = c("blank", "text", "blank", rep("text", 3), rep("blank", 1), "text", "blank",
rep("text", 3), rep("blank", 2), "text", rep("blank", 2), "text", rep("blank", 5), "text", "blank", "text",
rep("blank", 73), rep("text", 3), rep("blank", 2), rep("text", 7), "blank", "text", "blank")))
df.1 <- df.1[-1, ]
names(df.1) <- c("BUNO", "TMS", "CNFG", "LOT", "SQUADRON", "TOTAL.HRS", "DD250.DATE", "STRIKE.DATE", "DAYS.IN.SERVICE",
"TOTAL.LND", "TOTAL.TRAP", "TOTAL.CAT", "TYCOM", "PARENT.COMMAND", "CAG.MAG",
"AIRRS.CODE", "INOUT", "CBR", "PMI", "HFH", "MOD", "SRWK", "REMARKS")
df.1$LOT <- as.integer(df.1$LOT)
df.1$BUNO <- as.integer(df.1$BUNO)
df.1$CNFG[is.na(df.1$CNFG)] <- ""
df.1$TOTAL.HRS <- as.numeric(df.1$TOTAL.HRS)
df.1$DD250.DATE <- as.character(as.Date(as.numeric(df.1$DD250.DATE), origin = "1899-12-30"))
df.1$STRIKE.DATE <- as.character(as.Date(as.numeric(df.1$STRIKE.DATE), origin = "1899-12-30"))
df.1$DAYS.IN.SERVICE <- as.integer(df.1$DAYS.IN.SERVICE)
df.1 <- subset(df.1, !is.na(TMS))
dbcon <- getdbcon()
hash <- md5sum(paste0(d.path, "1511_FH & Inv Rpt.xlsm"))
dbWriteTable(dbcon, "loadedfileinfo",
data.frame(datainfo = "PMA265 FH & Inv Report",
sourcefile = "1511_FH & Inv Rpt.xlsm",
filehash = hash),
row.names = FALSE, append = TRUE)
dbWriteTable(dbcon, "FHInvRep_Master", df.1, overwrite = TRUE)
return(NULL)
}
LoadMasterTable()
library(sqldf)
library(RSQLite)
library(XLConnect)
library(gdata)
library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
library(ggplot2)
library(stringr)
# ----------------------------------------------------------------------------------
# Functions to Write Data
# ----------------------------------------------------------------------------------
replace_comma <- function(x){
gsub(x = x, pattern = ",", replacement = "")
}
import_sheet <- function(Table){
Table <- Table[!(is.na(Table[, 3])), ]
#   colnames(Table) <- Table[1, ]
names(Table) <- gsub(names(Table), pattern = "\n|\\$", replacement = "")
#   Table <- Table[-1, ]
first.fy.col <- min(which(grepl(colnames(Table), pattern = "[0-9]")))
Table[, first.fy.col:ncol(Table)] <- colwise(replace_comma)(Table[, first.fy.col:ncol(Table)])
Table[, first.fy.col:ncol(Table)] <- colwise(as.integer)(Table[, first.fy.col:ncol(Table)])
Table[, first.fy.col:ncol(Table)] <- colwise(function(x){ifelse(is.na(x),0,x)})(Table[, first.fy.col:ncol(Table)])
Table[, 'POM.notes'] <- ifelse(is.na( Table[, 'POM.notes']), "", Table[, 'POM.notes'])
names(Table) <- gsub(names(Table), pattern = "\\.", replacement = "_")
names(Table) <- gsub(names(Table), pattern = "X", replacement = "")
return(Table)
}
prepare_table <- function(table, db.conn, budget_phase, budget_year, FleetReserve){
# Extract Column names from Input Data
table <- ddply(table, .(Depot, Sub_Program, Fdg, TMS), function(df){
df$ID <- 1:nrow(df)
return(df)
})
table <- table[, c(1:4, ncol(table), 5:(ncol(table) - 1))]
table.cols <- colnames(table)
key.cols <- table.cols[1:6]
budget.cols <- table.cols[(-1)*1:6]
budget.cols <- unique(gsub(x = budget.cols, pattern = "(\\s)?[0-9]{2}(\\s)?", replacement = ""))
# Melt dataframe and reassemble
for (column_name in budget.cols){
temp.df <- table[, which(table.cols %in% key.cols | grepl(table.cols, pattern = column_name, perl = T))]
value.columns <- colnames(temp.df[(-1)*1:6])
colnames(temp.df) <- c(key.cols, value.columns)
temp.df <- melt(temp.df, id.vars = key.cols, measure.vars = value.columns, variable.name = "FY", value.name = column_name)
# Set column names
replace_string <- gsub(temp.df$FY, pattern = "[0-9]+_", replacement = "")[1]
temp.df$FY <- as.integer(gsub(temp.df$FY, pattern = paste0("_", replace_string), replacement = ""))
setnames(temp.df, column_name, replace_string)
temp.df[, 8] <- as.integer(temp.df[, 8]) # Value Column
temp.df$FY <- temp.df$FY + 2000
if (which(budget.cols == column_name) == 1){
melted.table <- temp.df
} else {
melted.table <- merge(melted.table, temp.df, by = c(key.cols, "FY"))
}
}
names(melted.table) <- gsub(names(melted.table), pattern = "^_|_$|_", replacement = "")
melted.table$FY <- as.integer(melted.table$FY)
# Add Budget Info
melted.table$budget_year <- as.integer(budget_year)
melted.table$budget_type <- budget_phase
melted.table$FleetReserve <- FleetReserve
melted.table$status <- ""
melted.table <- select(melted.table, -TotalReqUnits)
melted.table$status[melted.table$budget_type %in% c("PB", "OSD")] <- ifelse(melted.table$budget_year[melted.table$budget_type %in% c("PB", "OSD")] -
melted.table$FY[melted.table$budget_type %in% c("PB", "OSD")] <= 0, 'Forecast',
ifelse(melted.table$budget_year[melted.table$budget_type %in% c("PB", "OSD")] -
melted.table$FY[melted.table$budget_type %in% c("PB", "OSD")] >= 2, 'Actuals', 'In Execution'))
melted.table$status[melted.table$budget_type == "FMB"] <- ifelse(melted.table$budget_year[melted.table$budget_type == "FMB"] -
melted.table$FY[melted.table$budget_type == "FMB"] <= 1, 'Forecast',
ifelse(melted.table$budget_year[melted.table$budget_type == "FMB"] -
melted.table$FY[melted.table$budget_type == "FMB"] >= 3, 'Actuals', 'In Execution'))
# Write to Database
dbWriteTable(conn = db.conn, name = "Budgets", value = melted.table, row.names = FALSE, append = T)
}
read_file <- function(file.name, phase = "auto", year = "auto"){
if (phase == "auto") {
phase <- substring(file.name, 4, str_locate(file.name, "_")[1, 'end'] - 1)
}
if (year == "auto") {
year <- paste0("20", substring(file.name, 1, 2))
}
wb.file <- paste0(path, file.name)
wb <- loadWorkbook(wb.file)
Tables <- readWorksheet(wb, sheet = getSheets(wb))
Fleet <- import_sheet(Tables$Fleet)
Reserve <- import_sheet(Tables$Reserve)
prepare_table(Fleet, db, budget_phase = phase, budget_year = year, "Fleet")
prepare_table(Reserve, db, budget_phase = phase, budget_year = year, "Reserve")
}
# ----------------------------------------------------------------------------------
# Write Data
# ----------------------------------------------------------------------------------
# Read in file
add.Budgets <- function(){
path <- "C:/Users/Tom/Documents/Projects/1a5a/"
setwd(path)
file.names <- dir(path, pattern = ".xlsx")
db <- dbConnect(SQLite(), dbname = "1a5a.sqlite")
#dbSendQuery(conn = db, "DROP TABLE Budgets")
for (file in file.names){
print(file)
read_file(file)
print(warnings())
}
}
path <- "C:/Users/Tom/Documents/Projects/1a5a/"
setwd(path)
file.names <- dir(path, pattern = ".xlsx")
db <- dbConnect(SQLite(), dbname = "1a5a.sqlite")
dbSendQuery(db, "DROP TABLE budgets")
for (file in file.names){
print(file)
read_file(file)
print(warnings())
}
for (file in file.names){
print(file)
read_file(file)
print(warnings())
}
for (file in file.names){
print(file)
read_file(file)
print(warnings())
}
for (file in file.names){
print(file)
read_file(file)
print(warnings())
}
library(ggplot2)
library(reshape2)
library(dplyr)
library(plyr)
setwd("C:/Users/Tom/Documents/github/Bullying")
bullyData <- read.csv("QualStudy1.csv")
bullyData.head
# Combine all stories
full_story <- paste(bullyData$Story, collapse = " ")
# Split into sentances
sent_story <- strsplit(full_story, split = "\\.")
# Extract word list
# Remove periods and commas
word_story <- gsub(x = full_story, pattern = "\\.|,", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story = gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- strsplit(word_story, split = " ")
library(ggplot2)
library(reshape2)
library(dplyr)
library(plyr)
setwd("C:/Users/Tom/Documents/github/Bullying")
bullyData <- read.csv("QualStudy1.csv")
# Combine all stories
full_story <- paste(bullyData$Story, collapse = " ")
# Split into sentances
sent_story <- strsplit(full_story, split = "\\.")
# Extract word list
# Remove periods and commas
word_story <- gsub(x = full_story, pattern = "\\.|,", replacement = "")
sent_story <- unlist(strsplit(full_story, split = "\\."))
# Combine all stories
full_story <- paste(bullyData$Story, collapse = " ")
# Split into sentances
sent_story <- unlist(strsplit(full_story, split = "\\."))
# Extract word list
# Remove periods and commas
word_story <- gsub(x = full_story, pattern = "\\.|,", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story = gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- unlist(strsplit(word_story, split = " "))
table(word_story)
str(table(word_story))
data.frame(table(word_story))
full_story <- tolower(full_story)
# Combine all stories
full_story <- paste(bullyData$Story, collapse = " ")
full_story <- tolower(full_story)
# Split into sentances
sent_story <- unlist(strsplit(full_story, split = "\\."))
# Extract word list
# Remove periods and commas
word_story <- gsub(x = full_story, pattern = "\\.|,", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- unlist(strsplit(word_story, split = " "))
word_story <- data.frame(table(word_story))
word_story
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[\\)|\\(|!", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- unlist(strsplit(word_story, split = " "))
word_story <- gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- data.frame(table(word_story))
wrod story
word_story
word_story <- gsub(x = word_story, pattern = "^\'(.*)\'$", replacement = "\\1")
word_story
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[\\)|\\(|!", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- unlist(strsplit(word_story, split = " "))
word_story <- gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- gsub(x = word_story, pattern = "^\'(.*)\'$", replacement = "\\1")
word_story <- data.frame(table(word_story))
word_story
word_story <- gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
library(ggplot2)
library(reshape2)
library(dplyr)
library(plyr)
setwd("C:/Users/Tom/Documents/github/Bullying")
bullyData <- read.csv("QualStudy1.csv")
# Combine all stories
full_story <- paste(bullyData$Story, collapse = " ")
full_story <- tolower(full_story)
# Split into sentances
sent_story <- unlist(strsplit(full_story, split = "\\."))
# Extract word list
# Remove periods and commas
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[|\\)|\\(|!", replacement = "")
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- unlist(strsplit(word_story, split = " "))
head(word_story)
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[|\\)|\\(|!|{|}", replacement = "")
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[|\\)|\\(|!|\\{|\\}", replacement = "")
word_story
bullyData <- read.csv("QualStudy1.csv")
# Combine all stories
full_story <- paste(bullyData$Story, collapse = " ")
full_story <- tolower(full_story)
# Split into sentances
sent_story <- unlist(strsplit(full_story, split = "\\."))
# Extract word list
# Remove periods and commas
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[|\\)|\\(|!|\\{|\\}", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- unlist(strsplit(word_story, split = " "))
word_story
word_story <- gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- gsub(x = word_story, pattern = "^\'(.*)\'$", replacement = "\\1")
word_story <- data.frame(table(word_story))
head(word_story)
columns(word_story) <- c("word", "frequency")
names(word_story) <- c("word", "frequency")
word_story <- arrange(word_story, frequency)
word_story
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[|\\)|\\(|!|\\{|\\}", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- unlist(strsplit(word_story, split = " "))
word_story <- gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- gsub(x = word_story, pattern = "^\'(.*)\'$", replacement = "\\1")
word_story <- data.frame(table(word_story))
word_story
bullyData <- read.csv("QualStudy1.csv")
# Combine all stories
full_story <- paste(bullyData$Story, collapse = " ")
full_story <- tolower(full_story)
# Split into sentances
sent_story <- unlist(strsplit(full_story, split = "\\."))
# Extract word list
# Remove periods and commas
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[|\\)|\\(|!|\\{|\\}", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- unlist(strsplit(word_story, split = " "))
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "^\"(.*)\"$", replacement = "\\1")
word_story <- gsub(x = word_story, pattern = "^\'(.*)\'$", replacement = "\\1")
}
word_story <- data.frame(table(word_story))
word_story
word_story <- gsub(x = full_story, pattern = "\\.|,|\\]|\\[|\\)|\\(|!|\\{|\\}", replacement = "")
# remove double spaces
for (i in seq(5)){
word_story <- gsub(x = word_story, pattern = "  ", replacement = " ")
}
# remove quotes
word_story <- unlist(strsplit(word_story, split = " "))
word_story <- gsub(x = word_story, pattern = '"', replacement = "")
word_story <- gsub(x = word_story, pattern = "'", replacement = "")
word_story <- data.frame(table(word_story))
word_story
setwd("C:/Users/Tom/Documents/github/Bullying")
bullyData <- read.csv("QualStudy1.csv")
library(ggplot2)
library(reshape2)
library(dplyr)
library(plyr)
setwd("C:/Users/Tom/Documents/github/Bullying")
bullyData <- read.csv("QualStudy1.csv")
library(ggplot2)
library(reshape2)
library(dplyr)
library(plyr)
setwd("C:/Users/Tom/Documents/github/Bullying")
bullyData <- read.csv("../data/QualStudy1.csv")
bullyData <- read.csv("data/QualStudy1.csv")
